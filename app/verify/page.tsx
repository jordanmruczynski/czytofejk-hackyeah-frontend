"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Textarea } from "@/components/ui/textarea"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  Loader2,
  AlertCircle,
  CheckCircle2,
  Upload,
  FileText,
  ImageIcon,
  Shield,
  Sparkles,
  Languages,
  LinkIcon,
} from "lucide-react"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { createClient } from "@/lib/supabase/client"
import Link from "next/link"

const translations = {
  pl: {
    header: {
      title: "Platforma Weryfikacji Treści",
      subtitle: "Wykrywanie AI w obrazach i dezinformacji w tekście",
    },
    tabs: {
      image: "Weryfikacja Obrazu",
      text: "Analiza Treści",
    },
    imageVerification: {
      title: "Wykrywanie Obrazów AI",
      description: "Prześlij obraz, aby sprawdzić, czy został wygenerowany przez sztuczną inteligencję",
      selectImage: "Wybierz Obraz",
      verifyButton: "Weryfikuj Obraz",
      analyzing: "Analizowanie...",
      verificationFailed: "Weryfikacja Nieudana",
      analysisComplete: "Analiza Zakończona",
      confidenceScore: "Wynik Pewności:",
      modelResults: "Wyniki Analizy Modeli",
      status: "Status:",
      viewRawJson: "Zobacz Surową Odpowiedź JSON",
    },
    textVerification: {
      title: "Wykrywanie Dezinformacji",
      description:
        "Analizuj skopiowaną treść tekstową, bądź podaj link url do YouTube, czy strony internetowej, aby sprawdzić je pod kątem potencjalnej dezinformacji",
      textContent: "Treść Tekstowa lub URL",
      placeholder:
        "Wklej tekst lub URL (YouTube, artykuł strona www), który chcesz zweryfikować pod kątem dezinformacji...",
      verifyButton: "Weryfikuj Treść",
      analyzingText: "Analizowanie...",
      analysisFailed: "Analiza Nieudana",
      warning: "Ostrzeżenie",
      disinformationDetected: "Wykryto Dezinformację",
      clear: "Czysto",
      noDisinformation: "Nie Wykryto Dezinformacji",
      detailedAnalysis: "Szczegółowa Analiza",
      referenceSources: "Źródła Referencyjne",
      viewRawJson: "Zobacz Surową Odpowiedź JSON",
      detectingType: "Wykrywanie typu treści...",
    },
  },
  en: {
    header: {
      title: "Content Verification Platform",
      subtitle: "AI-powered detection for images and disinformation",
    },
    tabs: {
      image: "Image Verification",
      text: "Text Analysis",
    },
    imageVerification: {
      title: "AI Image Detection",
      description: "Upload an image to verify if it was generated by artificial intelligence",
      selectImage: "Select Image",
      verifyButton: "Verify Image",
      analyzing: "Analyzing...",
      verificationFailed: "Verification Failed",
      analysisComplete: "Analysis Complete",
      confidenceScore: "Confidence Score:",
      modelResults: "Model Analysis Results",
      status: "Status:",
      viewRawJson: "View Raw JSON Response",
    },
    textVerification: {
      title: "Disinformation Detection",
      description: "Analyze text content or links (YouTube, articles) for potential disinformation",
      textContent: "Text Content or URL",
      placeholder: "Paste text or URL (YouTube, article) you want to verify for disinformation...",
      verifyButton: "Verify Content",
      analyzingText: "Analyzing...",
      analysisFailed: "Analysis Failed",
      warning: "Warning",
      disinformationDetected: "Disinformation Detected",
      clear: "Clear",
      noDisinformation: "No Disinformation Detected",
      detailedAnalysis: "Detailed Analysis",
      referenceSources: "Reference Sources",
      viewRawJson: "View Raw JSON Response",
      detectingType: "Detecting content type...",
    },
  },
}

type Language = "pl" | "en"

export default function Home() {
  const [language, setLanguage] = useState<Language>("pl")
  const t = translations[language]

  // Auth and rate limiting state
  const [user, setUser] = useState<any>(null)
  const [isCheckingAuth, setIsCheckingAuth] = useState(true)
  const [rateLimitReached, setRateLimitReached] = useState({ image: false, text: false })

  // Image verification state
  const [imageFile, setImageFile] = useState<File | null>(null)
  const [imagePreview, setImagePreview] = useState<string | null>(null)
  const [imageLoading, setImageLoading] = useState(false)
  const [imageResult, setImageResult] = useState<any>(null)
  const [imageError, setImageError] = useState<string | null>(null)

  // Text verification state
  const [text, setText] = useState("")
  const [textLoading, setTextLoading] = useState(false)
  const [textResult, setTextResult] = useState<any>(null)
  const [textError, setTextError] = useState<string | null>(null)

  useEffect(() => {
    const checkAuth = async () => {
      const supabase = createClient()
      const {
        data: { user },
      } = await supabase.auth.getUser()
      setUser(user)
      setIsCheckingAuth(false)

      // Check rate limits for anonymous users
      if (!user) {
        const imageCount = Number.parseInt(localStorage.getItem("anonymous_image_count") || "0")
        const textCount = Number.parseInt(localStorage.getItem("anonymous_text_count") || "0")
        setRateLimitReached({
          image: imageCount >= 1,
          text: textCount >= 1,
        })
      }
    }
    checkAuth()
  }, [])

  const saveToHistory = async (type: string, inputData: string, result: any) => {
    if (!user) return

    try {
      const supabase = createClient()
      await supabase.from("verification_history").insert({
        user_id: user.id,
        verification_type: type,
        input_data: inputData,
        result: result,
      })
    } catch (error) {
      console.error("[v0] Failed to save to history:", error)
    }
  }

  const updateAnonymousRateLimit = (type: "image" | "text") => {
    if (user) return

    const key = `anonymous_${type}_count`
    const currentCount = Number.parseInt(localStorage.getItem(key) || "0")
    localStorage.setItem(key, String(currentCount + 1))
    setRateLimitReached((prev) => ({ ...prev, [type]: true }))
  }

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      setImageFile(file)
      setImageResult(null)
      setImageError(null)

      // Create preview
      const reader = new FileReader()
      reader.onloadend = () => {
        setImagePreview(reader.result as string)
      }
      reader.readAsDataURL(file)
    }
  }

  const verifyImage = async () => {
    if (!imageFile) return

    if (!user && rateLimitReached.image) {
      setImageError(
        language === "pl"
          ? "Osiągnięto limit weryfikacji. Zaloguj się, aby kontynuować."
          : "Verification limit reached. Please log in to continue.",
      )
      return
    }

    setImageLoading(true)
    setImageError(null)
    setImageResult(null)

    try {
      const formData = new FormData()
      formData.append("file", imageFile)

      const response = await fetch("/api/verify-image", {
        method: "POST",
        body: formData,
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      setImageResult(result)

      await saveToHistory("image", imageFile.name, result)
      updateAnonymousRateLimit("image")
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : "Failed to verify image"
      setImageError(errorMessage)
    } finally {
      setImageLoading(false)
    }
  }

  const isURL = (str: string): boolean => {
    try {
      const url = new URL(str.trim())
      return url.protocol === "http:" || url.protocol === "https:"
    } catch {
      return false
    }
  }

  const verifyText = async () => {
    if (!text.trim()) return

    if (!user && rateLimitReached.text) {
      setTextError(
        language === "pl"
          ? "Osiągnięto limit weryfikacji. Zaloguj się, aby kontynuować."
          : "Verification limit reached. Please log in to continue.",
      )
      return
    }

    setTextLoading(true)
    setTextError(null)
    setTextResult(null)

    try {
      const inputText = text.trim()
      const isLink = isURL(inputText)

      // Choose endpoint based on input type
      const endpoint = isLink ? "/api/verify-link" : "/api/verify-text"
      const body = isLink ? { url: inputText } : { text: inputText }

      const response = await fetch(endpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(body),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      setTextResult(result)

      await saveToHistory(isLink ? "link" : "text", inputText, result)
      updateAnonymousRateLimit("text")
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : "Failed to verify content"
      setTextError(errorMessage)
    } finally {
      setTextLoading(false)
    }
  }

  if (isCheckingAuth) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-slate-900">
      <header className="border-b border-border/40 backdrop-blur-sm bg-card/30">
        <div className="mx-auto max-w-6xl px-6 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="flex h-12 w-12 items-center justify-center rounded-xl bg-primary/10 ring-2 ring-primary/20">
                <Shield className="h-6 w-6 text-primary" />
              </div>
              <div>
                <h1 className="text-2xl font-bold tracking-tight">{t.header.title}</h1>
                <p className="text-sm text-muted-foreground">{t.header.subtitle}</p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              {user ? (
                <>
                  <Badge variant="outline" className="gap-2">
                    <CheckCircle2 className="h-3 w-3" />
                    {user.email}
                  </Badge>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={async () => {
                      const supabase = createClient()
                      await supabase.auth.signOut()
                      window.location.href = "/"
                    }}
                  >
                    {language === "pl" ? "Wyloguj" : "Logout"}
                  </Button>
                  <Button variant="default" size="sm" asChild>
                    <Link href="/dashboard">{language === "pl" ? "Panel" : "Dashboard"}</Link>
                  </Button>
                </>
              ) : (
                <Button variant="outline" size="sm" asChild>
                  <Link href="/auth/login">{language === "pl" ? "Zaloguj się" : "Login"}</Link>
                </Button>
              )}
              <Button
                variant={language === "pl" ? "default" : "outline"}
                size="sm"
                onClick={() => setLanguage("pl")}
                className="gap-2"
              >
                <Languages className="h-4 w-4" />
                PL
              </Button>
              <Button
                variant={language === "en" ? "default" : "outline"}
                size="sm"
                onClick={() => setLanguage("en")}
                className="gap-2"
              >
                <Languages className="h-4 w-4" />
                EN
              </Button>
            </div>
          </div>
          {!user && (
            <Alert className="mt-4 border-yellow-500/50 bg-yellow-500/10">
              <AlertCircle className="h-4 w-4 text-yellow-500" />
              <AlertDescription className="text-sm">
                {language === "pl"
                  ? "Niezalogowani użytkownicy mogą wykonać tylko jedną weryfikację obrazu i jedną weryfikację tekstu. Zaloguj się, aby uzyskać nieograniczony dostęp."
                  : "Anonymous users can perform only one image verification and one text verification. Log in for unlimited access."}
              </AlertDescription>
            </Alert>
          )}
        </div>
      </header>

      <main className="mx-auto max-w-6xl px-6 py-8">
        <Tabs defaultValue="image" className="w-full space-y-6">
          <TabsList className="grid w-full grid-cols-2 bg-card/50 p-1 backdrop-blur-sm">
            <TabsTrigger
              value="image"
              className="flex items-center gap-2 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
            >
              <ImageIcon className="h-4 w-4" />
              <span className="font-medium">{t.tabs.image}</span>
            </TabsTrigger>
            <TabsTrigger
              value="text"
              className="flex items-center gap-2 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
            >
              <FileText className="h-4 w-4" />
              <span className="font-medium">{t.tabs.text}</span>
            </TabsTrigger>
          </TabsList>

          <TabsContent value="image" className="space-y-6">
            <Card className="border-border/50 bg-card/50 backdrop-blur-sm">
              <CardHeader className="space-y-1">
                <div className="flex items-center gap-2">
                  <Sparkles className="h-5 w-5 text-primary" />
                  <CardTitle className="text-xl">{t.imageVerification.title}</CardTitle>
                </div>
                <CardDescription className="text-base">{t.imageVerification.description}</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-3">
                  <Label htmlFor="image-upload" className="text-sm font-medium">
                    {t.imageVerification.selectImage}
                  </Label>
                  <div className="flex flex-col gap-4 sm:flex-row">
                    <div className="flex-1">
                      <Input
                        id="image-upload"
                        type="file"
                        accept="image/*"
                        onChange={handleImageChange}
                        disabled={!user && rateLimitReached.image}
                        className="cursor-pointer file:mr-4 file:rounded-md file:border-0 file:bg-primary file:px-4 file:py-2 file:text-sm file:font-medium file:text-primary-foreground file:transition-colors hover:file:bg-primary/90"
                      />
                    </div>
                    <Button
                      onClick={verifyImage}
                      disabled={!imageFile || imageLoading || (!user && rateLimitReached.image)}
                      size="lg"
                      className="bg-primary hover:bg-primary/90"
                    >
                      {imageLoading ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          {t.imageVerification.analyzing}
                        </>
                      ) : (
                        <>
                          <Upload className="mr-2 h-4 w-4" />
                          {t.imageVerification.verifyButton}
                        </>
                      )}
                    </Button>
                  </div>
                </div>

                {imagePreview && (
                  <div className="overflow-hidden rounded-xl border-2 border-border/50 bg-muted/20 p-4">
                    <img
                      src={imagePreview || "/placeholder.svg"}
                      alt="Preview"
                      className="mx-auto max-h-80 rounded-lg object-contain"
                    />
                  </div>
                )}

                {imageError && (
                  <Alert variant="destructive" className="border-destructive/50 bg-destructive/10">
                    <AlertCircle className="h-4 w-4" />
                    <AlertTitle className="font-semibold">{t.imageVerification.verificationFailed}</AlertTitle>
                    <AlertDescription>{imageError}</AlertDescription>
                  </Alert>
                )}

                {imageResult && (
                  <div className="space-y-4">
                    <div className="rounded-xl border border-primary/20 bg-primary/5 p-4">
                      <div className="flex items-start gap-3">
                        <CheckCircle2 className="h-5 w-5 text-primary mt-0.5" />
                        <div className="flex-1 space-y-2">
                          <div className="flex items-center gap-2">
                            <span className="font-semibold">{t.imageVerification.analysisComplete}</span>
                            <Badge variant="secondary" className="bg-primary/20 text-primary">
                              {imageResult.status}
                            </Badge>
                          </div>
                          <div className="flex items-center gap-4 text-sm">
                            <span className="text-muted-foreground">{t.imageVerification.confidenceScore}</span>
                            <span className="font-mono text-lg font-bold text-primary">
                              {imageResult.score?.toFixed(2) || "N/A"}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>

                    {imageResult.models && imageResult.models.length > 0 && (
                      <div className="space-y-3">
                        <h4 className="flex items-center gap-2 text-sm font-semibold">
                          <span className="h-1 w-1 rounded-full bg-primary" />
                          {t.imageVerification.modelResults}
                        </h4>
                        <div className="grid gap-3 sm:grid-cols-2">
                          {imageResult.models.map((model: any, idx: number) => (
                            <div
                              key={idx}
                              className="rounded-lg border border-border/50 bg-card/50 p-4 backdrop-blur-sm transition-colors hover:border-primary/30"
                            >
                              <div className="flex items-start justify-between gap-2">
                                <span className="font-medium text-sm">{model.name}</span>
                                <Badge variant="outline" className="font-mono text-xs">
                                  {model.score?.toFixed(2) || "N/A"}
                                </Badge>
                              </div>
                              <div className="mt-2 text-xs text-muted-foreground">
                                {t.imageVerification.status} {model.status}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    <details className="group rounded-lg border border-border/50 bg-card/30 p-4">
                      <summary className="cursor-pointer font-medium text-sm text-muted-foreground transition-colors group-open:text-foreground">
                        {t.imageVerification.viewRawJson}
                      </summary>
                      <pre className="mt-3 overflow-auto rounded-md bg-muted/50 p-4 text-xs">
                        <code className="text-muted-foreground">{JSON.stringify(imageResult, null, 2)}</code>
                      </pre>
                    </details>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="text" className="space-y-6">
            <Card className="border-border/50 bg-card/50 backdrop-blur-sm">
              <CardHeader className="space-y-1">
                <div className="flex items-center gap-2">
                  <Sparkles className="h-5 w-5 text-primary" />
                  <CardTitle className="text-xl">{t.textVerification.title}</CardTitle>
                </div>
                <CardDescription className="text-base">{t.textVerification.description}</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-3">
                  <Label htmlFor="text-input" className="text-sm font-medium flex items-center gap-2">
                    {t.textVerification.textContent}
                    <LinkIcon className="h-3.5 w-3.5 text-muted-foreground" />
                  </Label>
                  <Textarea
                    id="text-input"
                    placeholder={t.textVerification.placeholder}
                    value={text}
                    onChange={(e) => setText(e.target.value)}
                    disabled={!user && rateLimitReached.text}
                    rows={8}
                    className="resize-none bg-muted/20 font-mono text-sm"
                  />
                </div>

                <Button
                  onClick={verifyText}
                  disabled={!text.trim() || textLoading || (!user && rateLimitReached.text)}
                  size="lg"
                  className="w-full bg-primary hover:bg-primary/90"
                >
                  {textLoading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      {t.textVerification.analyzingText}
                    </>
                  ) : (
                    <>
                      <FileText className="mr-2 h-4 w-4" />
                      {t.textVerification.verifyButton}
                    </>
                  )}
                </Button>

                {textError && (
                  <Alert variant="destructive" className="border-destructive/50 bg-destructive/10">
                    <AlertCircle className="h-4 w-4" />
                    <AlertTitle className="font-semibold">{t.textVerification.analysisFailed}</AlertTitle>
                    <AlertDescription>{textError}</AlertDescription>
                  </Alert>
                )}

                {textResult && (
                  <div className="space-y-4">
                    <Alert
                      variant={textResult.decision === "tak" ? "destructive" : "default"}
                      className={
                        textResult.decision === "tak"
                          ? "border-destructive/50 bg-destructive/10"
                          : "border-primary/50 bg-primary/10"
                      }
                    >
                      <CheckCircle2 className="h-4 w-4" />
                      <AlertTitle className="flex items-center gap-2 font-semibold">
                        {textResult.decision === "tak" ? (
                          <>
                            <Badge variant="destructive">{t.textVerification.warning}</Badge>
                            {t.textVerification.disinformationDetected}
                          </>
                        ) : (
                          <>
                            <Badge className="bg-primary">{t.textVerification.clear}</Badge>
                            {t.textVerification.noDisinformation}
                          </>
                        )}
                      </AlertTitle>
                      <AlertDescription className="mt-2 leading-relaxed">{textResult.summary}</AlertDescription>
                    </Alert>

                    <div className="space-y-4 rounded-xl border border-border/50 bg-card/30 p-5">
                      <div className="space-y-2">
                        <h4 className="flex items-center gap-2 font-semibold text-sm">
                          <span className="h-1 w-1 rounded-full bg-primary" />
                          {t.textVerification.detailedAnalysis}
                        </h4>
                        <p className="text-sm leading-relaxed text-muted-foreground">{textResult.ai_explanatation}</p>
                      </div>

                      {textResult.sources && textResult.sources.length > 0 && (
                        <div className="space-y-2 border-t border-border/50 pt-4">
                          <h4 className="flex items-center gap-2 font-semibold text-sm">
                            <span className="h-1 w-1 rounded-full bg-primary" />
                            {t.textVerification.referenceSources}
                          </h4>
                          <ul className="space-y-2">
                            {textResult.sources.map((source: string, idx: number) => (
                              <li key={idx} className="flex items-start gap-2">
                                <span className="mt-1.5 h-1.5 w-1.5 flex-shrink-0 rounded-full bg-primary/50" />
                                <a
                                  href={source}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  className="break-all text-sm text-primary hover:underline"
                                >
                                  {source}
                                </a>
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>

                    <details className="group rounded-lg border border-border/50 bg-card/30 p-4">
                      <summary className="cursor-pointer font-medium text-sm text-muted-foreground transition-colors group-open:text-foreground">
                        {t.textVerification.viewRawJson}
                      </summary>
                      <pre className="mt-3 overflow-auto rounded-md bg-muted/50 p-4 text-xs">
                        <code className="text-muted-foreground">{JSON.stringify(textResult, null, 2)}</code>
                      </pre>
                    </details>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  )
}
